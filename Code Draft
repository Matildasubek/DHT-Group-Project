#Importing the necessary packages
from flask import Flask, abort, Response #flask is a library to use an API
from flask_restful import Api, Resource, reqparse #Import of API, resources and request/parse

#To initalize the server
app = Flask(__name__)
'''
The Flask web application framework is assigned to the "app" variable.
The __name__ variable (two underscores before and after) is a special Python variable, it gets its value depending on
how we execute the containing script.
'''
api = Api(app)
'''
The API is assigned to the variable "api" with the previously assigned "app" as value 
'''

#################################################### Temperature API ####################################################
currentTemperatureValueInC = 25
targetTemperatureValueInC = 67


# Function to convert Fahrenheit degrees to Celsius degrees
def ConvertToF(TemperatureInC):
    return (TemperatureInC * 9/5) + 32

#Assigning the current and target temperatures with values in a dictionary
currentTemperatureJson = {"current Temperature": {"in Celsius degree": currentTemperatureValueInC, "in Fahrenheit degree":ConvertToF(currentTemperatureValueInC)}}
TargetTemperatureJson = {"target Temperature": {"in Celsius degree": targetTemperatureValueInC, "in Fahrenheit degree":ConvertToF(targetTemperatureValueInC)}}

# 1. Provide the current temperature in °C and °F
class TemperatureIs(Resource): #created a class for the current (room) temperature
    def get(self):
        
        return currentTemperatureJson # when this class is called upon, it will return the assigned variable "currentTemperatureJson"

# 3. Provide the currently set target temperature in °C and °F
class TargetTemperature(Resource): # created a class for the desired (target) temperature
    def get(self):
        
        return TargetTemperatureJson # when this class is called upon, it will return the assigned variable "TargetTemperatureJson"

# 5. Set the target temperature to a specific level in °C
    def put(self):
       
        targetTemperature_put_args = reqparse.RequestParser() #activating the parsing function
        targetTemperature_put_args.add_argument("New target temperature in Celsius", type=float,
                                     help="What's the target temperature in Celsius?")
        #from the response (from the secondary test script) the new target temperature is parsed
        args = targetTemperature_put_args.parse_args() # the parsed variable targetTemperature_put_args is "switched" to
        #the new "args" variable

# 6. Do not accept values above 20 °C and below 5 °C
        if args["New target temperature in Celsius"] < 5 or args["New target temperature in Celsius"] > 20:
            return {"Error": "Invalid temperature value"}
        else:
            targetTemperatureValueInC = args["New target temperature in Celsius"]
            return {"New target temperature in Celsius": targetTemperatureValueInC}

api.add_resource(TemperatureIs, "/temperature")
api.add_resource(TargetTemperature, "/temperature/target")

#################################################### Temperature API ####################################################

##################################################### Humidity API #####################################################
CurrentHumidity = 115
targetHumidity = 80


# 2. Provide the current humidity in percent
class HumidityIs(Resource):
    def get(self):
        
        return {"Current humidity in percent": CurrentHumidity}

# 4. Provide the currently set target humidity in percent
class TargetHumidity(Resource):
    def get(self):
       
        return {"Target humidity in percent": targetHumidity}

# 7. Set the target humidity to a specific level in percent
    def put(self):
       
        targetHumidity_put_args = reqparse.RequestParser()
        targetHumidity_put_args.add_argument("New target humidity in percent", type=float,
                                     help="What's the target humidity in percentage?")
        args = targetHumidity_put_args.parse_args()

        if args["New target humidity in percent"] < 0 or args["New target humidity in percent"] > 100:
            return {"Error": "Invalid humidity value"}
        else:
            targetHumidity = args["New target humidity in percent"]
            return {"New target humidity in percent", targetHumidity}

api.add_resource(HumidityIs, "/humidity")
api.add_resource(TargetHumidity, "/humidity/target")

##################################################### Humidity API #####################################################

###################################################### Preset API ######################################################
# 8. Manage a set of presets that consist of name, target humidity and temperature
presetDic = {"p1":{"temperature": 20, "Humidity": 99, "IsActivated":False },
             "p2":{"temperature": 10, "Humidity": 88, "IsActivated":False },
             "p3":{"temperature": 0, "Humidity": 77, "IsActivated":False },}


# 10. Add an operation to list all existing presets
class Preset(Resource):
    def get(self):
        
        return presetDic

# 9. Add an operation to create a preset
    def put(self):
       
        preset_put_args = reqparse.RequestParser()
        preset_put_args.add_argument("temperature", type=float)
        preset_put_args.add_argument("humidity", type=float)
        preset_put_args.add_argument("name", type=str)
        args = preset_put_args.parse_args()
        print(presetDic.keys())
        
        if args["name"] in presetDic.keys():
            return {"Error": "This name already exist!"}
        elif args["temperature"] < 5 or args["temperature"] > 20:
            return {"Error": "Invalid temperature value"}
        else:
            presetDic[args["name"]] = {"temperature": args["temperature"], "humidity" : args["humidity"], "IsActivated":False}
            return presetDic
       


# 11. Add a operation to remove a preset by name
    def delete(self):
        preset_delete_args = reqparse.RequestParser()
        preset_delete_args.remove_argument("name", type=str)
        removeArgs = preset_delete_args.parse_args()
        if removeArgs["name"] not in presetDic.keys():
            return {"Error": "This name does not exist!"}
        else:
            print(removeArgs)


# 12. Add an operation to select and activate a preset by name
    def post(self):
        
        presetActivate_put_args = reqparse.RequestParser()
        presetActivate_put_args.add_argument("name", type=str)
        presetActivate_put_args.add_argument("isActivated", type=str)
        activateArgs = presetActivate_put_args.parse_args()
        print(activateArgs)
       
        if activateArgs["name"] not in presetDic.keys():
            return {"Error": "This name does not exist!"}
        else:
            nameInTheData = activateArgs["name"]
            IsActivated = activateArgs["isActivated"] == "True"
            presetDic[nameInTheData][IsActivated] = IsActivated
            if IsActivated == True:
                return {"message": "Set activated correctly!" }
            else:
                return {"message": "Set deactivated correctly!" }
        
api.add_resource(Preset, "/preset")

###################################################### Preset API ######################################################

if __name__ == "__main__":
    app.run(debug=True)
